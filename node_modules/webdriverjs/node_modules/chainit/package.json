{
  "name": "chainit",
  "version": "2.0.2-backcompat",
  "description": "Turn an asynchronous JavaScript api into an asynchronous chainable JavaScript api.",
  "main": "index.js",
  "directories": {
    "example": "examples"
  },
  "scripts": {
    "test": "zuul -- test/chain.js"
  },
  "author": {
    "name": "Vincent Voyer",
    "email": "vincent@zeroload.net"
  },
  "license": "MIT/X11",
  "devDependencies": {
    "mocha": "~1.17.1",
    "zuul": "~1.5.4"
  },
  "dependencies": {
    "queue": "~1.0.2"
  },
  "keywords": [
    "chain",
    "async",
    "queue",
    "flow control",
    "chainable",
    "chainify",
    "chainit",
    "chain api"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/vvo/chainit.git"
  },
  "readme": "# chainit [![Build Status](https://travis-ci.org/vvo/chainit.png)](https://travis-ci.org/vvo/chainit) [![Dependency Status](https://david-dm.org/vvo/chainit.svg?theme=shields.io)](https://david-dm.org/vvo/chainit) [![devDependency Status](https://david-dm.org/vvo/chainit/dev-status.svg?theme=shields.io)](https://david-dm.org/vvo/chainit#info=devDependencies)\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/chainitvvo.svg)](https://saucelabs.com/u/chainitvvo)\n\nTurn an asynchronous JavaScript api into an asynchronous\n[chainable](http://en.wikipedia.org/wiki/Method_chaining) JavaScript api.\n\n## usage\n\n```js\nfunction MyApi() {}\nMyApi.prototype.method1 = function(cb) {cb()}\nMyApi.prototype.method2 = function(cb) {cb()}\n\nvar chainit = require('chainit');\nvar MyChainApi = chainit(MyApi);\nvar obj = new MyChainApi();\nobj\n  .method1()                      // 1st call\n  .method2()                      // 2nd call\n  .method1(function(/* args */) { // 3rd call\n    this.method1();               // 4th call\n  })\n  .method2();                     // 5th call\n```\n\n## Adding or overriding methods\n\nAdding and overriding methods works at both prototype level and instance level.\n\nYou must use `chainit.add(chain, methodName, method)`,\nyou can't do direct assignation (`chain.methodName = method`) because\n`object.observe` is not yet ready.\n\n```js\nfunction MyApi() {}\nMyApi.prototype.method1 = function(cb) {cb()}\nMyApi.prototype.method2 = function(cb) {cb()}\n\nvar chainit = require('chainit');\nvar MyChainApi = chainit(MyApi);\n\nvar obj = new MyChainApi();\n\n// override instance method\nchainit.add(obj, 'method1', function(cb) {\n  cb()\n});\n\nobj\n  .method1() // calls the newly added method1\n  .method2();\n\n// revert original method\nchainit.add(obj, 'method1', MyApi.prototype.method1);\n\n// override prototype method\nchainit.add(MyChainApi, 'method1', function(cb) {\n  cb()\n});\n\nvar obj2 = new MyChainApi();\n\nobj2.method1(); // calls the newly chained prototype `method1`\n```\n\n## features\n\nFeatures:\n\n* supports async apis\n* supports (crazy) nested calls\n* preserve nested calls order\n* preserve context in cb()\n* preserve cb(args)\n* supports process.nextTick(cb)\n* supports setTimeout(cb)\n* supports methods redifinition\n* supports adding new methods\n* fully tested! local: `npm install -g mocha && mocha`, saucelabs: `npm test`\n\n## tests\n\nSee [tests](test/).\n\n```shell\nnpm test\n```\n\n## examples\n\nSee [examples](examples/).\n\n## mixing async/sync apis\n\nThere is no easy way to mix sync/async chainable\napis because there is no way to differenciate sync/async calls.\n\n```js\nobj\n  .asyncMethod()\n  .syncMethod()\n```\n\nWe cannot know that syncMethod is synchronous and that\nwe do not\nneed to wait for a callback to be called to continue.\n\nEither your api is fully asynchronous and every method\ntakes a callback.\n\nEither your api is fully synchronous.\nIf you want synchronous support, make a pull request\nadding `chainit.sync(Constructor)`.\n\n## credits\n\nThis module is using [jessetane/queue](https://github.com/jessetane/queue).\n\nA chainable api is queueing methods and reordering calls, so we use a queue.\n\nThis module was built to replace the chainable api from\n[webdriverjs](https://github.com/camme/webdriverjs).\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/vvo/chainit/issues"
  },
  "homepage": "https://github.com/vvo/chainit",
  "_id": "chainit@2.0.2-backcompat",
  "_from": "chainit@^2.0.2-backcompat"
}
