{
  "name": "queue",
  "version": "1.0.2",
  "description": "An async job queue with adjustable concurrency",
  "author": {
    "name": "Jesse Tane",
    "email": "jesse.tane@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jessetane/queue.git"
  },
  "scripts": {
    "test": "node test/all.js"
  },
  "readme": "```\n  ____  _     _____ _     _____\n /  _ \\/ \\ /\\/  __// \\ /\\/  __/\n | / \\|| | |||  \\  | | |||  \\  \n | \\_\\|| \\_/||  /_ | \\_/||  /_ \n \\____\\\\____/\\____\\\\____/\\____\\\n\n```\nAn async job queue with adjustable concurrency.\n\n## Why\nWanted something more flexible than [async](https://github.com/caolan/async#queue)'s queue.\n\n## How\nThe module exports a class named `Queue` that implements most of the Array api. Pass async functions (ones that accept a callback) to an instance's `push()` method. Processing begins automatically on `process.nextTick()`.\n\n## Install\n`npm install queue`\n\n## Properties\n* `concurrency` maximum number of jobs that the queue should process concurrently - the default is 1  \n* `timeout` milliseconds to wait for a job to execute its callback  \n\n## Methods\n* `push(job)` add a job to the queue  \n\n## Events\n* `'processed'` when jobs finish  \n* `'timeout'` when `queue.timeout` milliseconds have elapsed and a job has not executed its callback  \n* `'drain'` when the queue finishes processing all its jobs  \n\n## Usage\n```javascript\nvar Queue = require('queue');\n\nvar q = new Queue({\n  timeout: 100,\n  concurrency: 100\n});\n\nvar results = [];\n\n\n// listen for events\n\nq.on('processed', function(job) {\n  console.log('job finished processing:', job.toString().replace(/\\n/g, ''));\n});\n\nq.on('drain', function() {\n  console.log('all done:', results);\n});\n\n\n// add jobs using familiar Array api\n\nq.push(function(cb) {\n  results.push('two');\n  cb();\n});\n\nq.push(\n  function(cb) {\n    results.push('four');\n    cb();\n  },\n  function(cb) {\n    results.push('five');\n    cb();\n  }\n);\n\nq.unshift(function(cb) {\n  results.push('one');\n  cb();\n});\n\nq.splice(2, 0, function(cb) {\n  results.push('three');\n  cb();\n});\n\n\n// use the timeout feature to deal with jobs that \n// take too long or forget to execute a callback\n\nq.on('timeout', function(job, next) {\n  console.log('job timed out:', job.toString().replace(/\\n/g, ''));\n  next();\n})\n\nq.push(function(cb) {\n  setTimeout(function() {\n    console.log('slow job finished');\n    cb();\n  }, 200);\n});\n\nq.push(function(cb) {\n  console.log('forgot to execute callback');\n});\n```\n\n## Note\nVersion 1.0 introduces api changes and is NOT backwards compatible with 0.0.2\n\n## License\n[WTFPL](http://www.wtfpl.net/txt/copying/)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jessetane/queue/issues"
  },
  "homepage": "https://github.com/jessetane/queue",
  "_id": "queue@1.0.2",
  "_from": "queue@~1.0.2"
}
