{
  "name": "webdriverjs",
  "description": "A nodejs bindings implementation for selenium 2.0/webdriver",
  "version": "1.5.1",
  "homepage": "https://github.com/camme/webdriverjs",
  "author": {
    "name": "camilo tapia",
    "email": "camilo.tapia@gmail.com"
  },
  "contributors": [
    {
      "name": "Dan Jenkins",
      "email": "dan.jenkins@holidayextras.com"
    },
    {
      "name": "Christian Bromann",
      "email": "mail@christian-bromann.com"
    },
    {
      "name": "Vincent Voyer",
      "email": "vincent@zeroload.net"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/camme/webdriverjs.git"
  },
  "bugs": {
    "url": "https://github.com/camme/webdriverjs/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/camme/webdriverjs/blob/master/LICENSE-MIT"
    }
  ],
  "main": "./index.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "node ./test/runner.js",
    "coverage": "istanbul cover ./test/runner.js",
    "prepublish": "npm prune"
  },
  "devDependencies": {
    "mocha": "~1.17.1",
    "chai": "~1.9.0",
    "jshint": "~2.4.1",
    "saucelabs": "~0.1.1",
    "glob": "~3.2.7",
    "bower": "~1.3.1",
    "nock": "~0.27.1",
    "coveralls": "~2.8.0",
    "istanbul": "^0.2.6"
  },
  "tags": [
    "web",
    "test",
    "selenium",
    "browser",
    "javascript"
  ],
  "keywords": [
    "webdriverjs",
    "webdriver",
    "selenium",
    "saucelabs",
    "sauce",
    "labs",
    "mocha",
    "nodeUnit",
    "buster",
    "phantomjs",
    "chai",
    "vows",
    "jasmine",
    "assert",
    "cucumber",
    "testingbot"
  ],
  "dependencies": {
    "chainit": "^2.0.2-backcompat",
    "pragma-singleton": "~1.0.3",
    "archiver": "~0.6.1",
    "request": "~2.34.0",
    "deepmerge": "~0.2.7"
  },
  "readme": "Webdriver/selenium 2.0 javascript bindings for nodejs [![Build Status](https://travis-ci.org/camme/webdriverjs.png?branch=master)](https://travis-ci.org/camme/webdriverjs) [![Coverage Status](https://coveralls.io/repos/camme/webdriverjs/badge.png?branch=master&)](https://coveralls.io/r/camme/webdriverjs?branch=master)\n=====================================================\n\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/camme-webdriverjs.svg)](https://saucelabs.com/u/camme-webdriverjs)\n\nThis library is a webdriver module for nodejs. It makes it possible to write\nsuper easy selenium tests in your favorite BDD or TDD test framework.\n\nHave a look at the many [examples](examples/).\n\nFor news or announcements follow [@webdriverjs](https://twitter.com/WebdriverJS) on Twitter.\n\n## How to install it\n\n```shell\nnpm install webdriverjs\n```\n\n## Disclaimer\n\nThis is not the official WebdriverJS driver, for differences between this and the official driver,\nplease take a look on [this issue post](https://github.com/camme/webdriverjs/issues/138#issuecomment-32051980).\n\n## Usage\n\n`webdriverjs` implements most of selenium's [JsonWireProtocol](https://code.google.com/p/selenium/wiki/JsonWireProtocol).\n\nMake sure you have a running selenium standalone/grid/hub.\n\nOr use [selenium-standalone](https://github.com/vvo/selenium-standalone) package to run one easily.\n\n```js\nvar webdriverjs = require('../index');\nvar options = {\n    desiredCapabilities: {\n        browserName: 'chrome'\n    }\n};\n\nwebdriverjs\n    .remote(options)\n    .init()\n    .url('http://www.google.com')\n    .title(function(err, res) {\n        console.log('Title was: ' + res.value);\n    })\n    .end();\n```\n\nSee the [full list of options](#options) you can pass to `.remote(options)`\n\nSee [helpers](#list-of-current-helper-methods) and [protocol methods](#list-of-current-implemented-wire-protocol-bindings).\n\n## Options\n\n### desiredCapabilities\nType: `Object`<br>\n\n**Example:**\n\n```js\nbrowserName: 'chrome',  // options: firefox, chrome, opera, safari\nversion: '27.0',        // browser version\nplatform: 'XP',         // OS platform\ntags: ['tag1','tag2'],  // specify some tags (e.g. if you use Sauce Labs)\nname: 'my test'         // set name for test (e.g. if you use Sauce Labs)\n```\n\nSee the [selenium documentation](https://code.google.com/p/selenium/wiki/DesiredCapabilities) for a list of the available `capabilities`.\n\n### logLevel\nType: `String`\n\nDefault: *silent*\n\nOptions: *verbose* | *silent* | *command* | *data* | *result*\n\n### screenshotPath\nSaves a screenshot to a given path if selenium driver crashes\n\nType: `String`|`null`\n\nDefault: *null*\n\n### singleton\n\nType: `Boolean`\n\nDefault: *false*\n\nSet to true if you always want to reuse the same remote\n\n## Selector API\n\nThe JsonWireProtocol provides several strategies to query an element. WebdriverJS simplifies these\nto make it more familiar with the common existing selector libraries like [Sizzle](http://sizzlejs.com/).\nThe following selector types are supported:\n\n- **CSS query selector**<br>\n  e.g. `client.click('h2.subheading a', function(err,res) {...})` etc.\n- **link text**<br>\n  To get an anchor element with a specific text in it (f.i. `<a href=\"http://webdriver.io\">WebdriverJS</a>`)\n  query the text starting with an equal (=) sign. In this example use `=WebdriverJS`\n- **partial link text**<br>\n  To find a anchor element whose visible text partially matches your search value, query it by using `*=`\n  in front of the query string (e.g. `*=driver`)\n- **tag name**<br>\n  To query an element with a specific tag name use `<tag>` or `<tag />`\n- **name attribute**<br>\n  For quering elements with a specific name attribute you can eather use a normal CSS3 selector or the\n  provided name strategy from the JsonWireProtocol by passing something like `[name=\"some-name\"]` as\n  selector parameter\n- **xPath**<br>\n  It is also possible to query elements via a specific xPath. The selector has to have a format like\n  for example `//BODY/DIV[6]/DIV[1]/SPAN[1]`\n\nIn near future WebdriverJS will cover more selector features like form selector (e.g. `:password`,`:file` etc)\nor positional selectors like `:first` or `:nth`.\n\n\n## Adding custom commands\n\nIf you which to extend with your own set of commands there is a method\ncalled `addCommand` available from the client object:\n\n```js\nvar client = require(\"webdriverjs\").remote();\n\n// create a command the returns the current url and title as one result\n// just to show an example\nclient.addCommand(\"getUrlAndTitle\", function(cb) {\n    this.url(function(err,urlResult) {\n        this.getTitle(function(err,titleResult) {\n            var specialResult = {url: urlResult.value, title: titleResult};\n            cb(err,specialResult);\n        })\n    });\n});\n\nclient\n    .init()\n    .url('http://www.github.com')\n    .getUrlAndTitle(function(err,result){\n        assert.equal(null, err)\n        assert.strictEqual(result.url,'https://github.com/');\n        assert.strictEqual(result.title,'GitHub Â· Build software better, together.');\n    })\n    .end();\n```\n\n## Local testing\n\nIf you want to help us in developing webdriverjs, you can easily add\n[mocha](https://github.com/visionmedia/mocha) [tests](test/) and run them locally:\n\n```sh\nnpm install -g selenium-standalone http-server phantomjs\n\n# start a local selenium instances\nstart-selenium\n\n# serves the test directory holding the test files\nhttp-server\n\n# runs tests !\nnpm test\n```\n\n## Selenium cloud providers\n\nWebdriverjs supports\n\n* <img src=\"https://pbs.twimg.com/profile_images/794342508/Logo_Square_bigger.png\" width=\"48\" /> [Sauce Labs](https://saucelabs.com/)\n* <img src=\"https://pbs.twimg.com/profile_images/1440403042/logo-separate-big_bigger.png\" width=\"48\" /> [BrowserStack](http://www.browserstack.com/)\n* <img src=\"https://pbs.twimg.com/profile_images/1647337797/testingbot1_bigger.png\" width=\"48\" /> [TestingBot](https://testingbot.com/)\n\nSee the corresponding [examples](examples/).\n\n## List of current helper methods\nThese are the current implemented helper methods. All methods take from 0\nto a couple of parameters. Also all methods accept a callback so that we\ncan assert values or have more logic when the callback is called.\n\n- **addValue(`String` selector, `String|String[]` value, `Function` callback)**<br>adds a value to an object found by a selector. You can also use unicode characters like `Left arrow` or `Back space`. You'll find all supported characters [here](https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/element/:id/value). To do that, the value has to correspond to a key from the table.\n- **call(callback)**<br>call given function in async order of current command queue\n- **chooseFile(`String` selector, `String` localFilePath, `Function` callback)**<br>Given a selector corresponding to an `<input type=file>`, will upload the local file to the browser machine and fill the form accordingly. It does not submit the form for you.\n- **clearElement(`String` selector, `Function` callback)**<br>clear an element of text\n- **click(`String` selector, `Function` callback)**<br>Clicks on an element based on a selector.\n- **close([`String` tab ID to focus on,] `Function` callback)**<br>Close the current window (optional: and switch focus to opended tab)\n- **deleteCookie(`String` name, `Function` callback)**<br>Delete a cookie for current page.\n- **doubleClick(`String` selector, `Function` callback)**<br>Clicks on an element based on a selector\n- **drag(`String` selector, `Number` startX, `Number` startY, `Number` endX, `Number` endY, `Number` touchCount, `Number` duration, `Function` callback)**<br>Perform a drag on the screen or an element (works only on [Appium](https://github.com/appium/appium/blob/master/docs/gestures.md))\n- **dragAndDrop(`String` sourceCssSelector, `String` destinationCssSelector, `Function` callback)**<br>Drags an item to a destination\n- **dragDown(`String` selector, `Number` touchCount, `Number` duration, `Function` callback)**<br>Perform a drag down on an element (works only on [Appium](https://github.com/appium/appium/blob/master/docs/gestures.md))\n- **dragLeft(`String` selector, `Number` touchCount, `Number` duration, `Function` callback)**<br>Perform a drag left on an element (works only on [Appium](https://github.com/appium/appium/blob/master/docs/gestures.md))\n- **dragRight(`String` selector, `Number` touchCount, `Number` duration, `Function` callback)**<br>Perform a drag right on an element (works only on [Appium](https://github.com/appium/appium/blob/master/docs/gestures.md))\n- **dragUp(`String` selector, `Number` touchCount, `Number` duration, `Function` callback)**<br>Perform a drag up on an element (works only on [Appium](https://github.com/appium/appium/blob/master/docs/gestures.md))\n- **emit(`String` eventName, [arg1], [arg2], [...])**<br>Execute each event listeners in order with the supplied arguments.\n- **end(`Function` callback)**<br>Ends a sessions (closes the browser)\n- **endAll(`Function` callback)**<br>Ends all sessions (closes the browser)\n- **execute(`String` or `Function` script, `Array` arguments, `Function` callback)**<br>Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame. If script is a `Function`, arguments is required.\n- **flick(`String` selector, `Number` startX, `Number` startY, `Number` endX, `Number` endY, `Number` touchCount, `Function` callback)**<br>Perform a flick on the screen or an element (works only on [Appium](https://github.com/appium/appium/blob/master/docs/gestures.md))\n- **getAttribute(`String` selector, `String` attribute name, `Function` callback)**<br>Get an attribute from an dom obj based on the selector and attribute name\n- **getCookie(`String` name, `Function` callback)**<br>Gets the cookie for current page.\n- **getCssProperty(`String` selector, `String` css property name, `Function` callback)**<br>Gets a css property from a dom object selected with a selector\n- **getCurrentTabId(`Function` callback)**<br>Retrieve the current window handle.\n- **getElementSize(`String` selector, `Function` callback)**<br>Gets the width and height for an object based on the selector\n- **getLocation(`String` selector, `Function` callback)**<br>Gets the x and y coordinate for an object based on the selector\n- **getLocationInView(`String` selector, `Function` callback)**<br>Gets the x and y coordinate for an object based on the selector in the view\n- **getOrientation(`Function` callback)**<br>Get the current browser orientation.\n- **getSource(`Function` callback)**<br>Gets source code of the page\n- **getTabIds(`Function` callback)**<br>Retrieve the list of all window handles available to the session.\n- **getTagName(`String` selector, `Function` callback)**<br>Gets the tag name of a dom obj found by the selector\n- **getText(`String` selector, `Function` callback)**<br>Gets the text content from a dom obj found by the selector\n- **getTitle(`Function` callback)**<br>Gets the title of the page\n- **getValue(`String` selector, `Function` callback)**<br>Gets the value of a dom obj found by selector\n- **isSelected(`String` selector, `Function` callback)**<br>Return true or false if an OPTION element, or an INPUT element of type checkbox or radiobutton is currently selected (found by selector).\n- **isVisible(`String` selector, `Function` callback)**<br>Return true or false if the selected dom obj is visible (found by selector)\n- **leftClick(`String` selector, `Function` callback)**<br>Apply left click at an element. If selector is not provided, click at the last moved-to location.\n- **hold(`String` selector,`Function` callback)**<br>Long press on an element using finger motion events.\n- **middleClick(`String` selector, `Function` callback)**<br>Apply middle click at an element. If selector is not provided, click at the last moved-to location.\n- **moveToObject(`String` selector, `Function` callback)**<br>Moves the page to the selected dom object\n- **newWindow(`String` url, `String` name for the new window, `String` new window features (e.g. size, position, scrollbars, etc.), `Function` callback)**<br>equivalent function to `Window.open()` in a browser\n- **on(`String` eventName, `Function` fn)**<br>Register event listener on specific event (the following are already defined: `init`,`command`,`end`,`error`)\n- **once(`String` eventName, `Function` fn)**<br>Adds a one time listener for the event (the following are already defined: `init`,`command`,`end`,`error`)\n- **pause(`Integer` milliseconds, `Function` callback)**<br>Pauses the commands by the provided milliseconds\n- **refresh(`Function` callback)**<br>Refresh the current page\n- **release(`String` selector, `Function` callback)**<br>Finger up on an element\n- **removeListener(`String` eventName, `Function` fn)**<br>Remove a listener from the listener array for the specified event\n- **removeAllListeners([`String` eventName])**<br>Removes all listeners, or those of the specified event\n- **rightClick(`String` selector, `Function` callback)**<br>Apply right click at an element. If selector is not provided, click at the last moved-to location.\n- **saveScreenshot(`String` path to file, `Function` callback)**<br>Saves a screenshot as a png from the current state of the browser\n- **scroll(`String` selector, `Function`callback)**<br>Scroll to a specific element. You can also pass two offset values as parameter to scroll to a specific position (e.g. `scroll(xoffset,yoffset,callback)`).\n- **setCookie(`Object` cookie, `Function` callback)**<br>Sets a [cookie](http://code.google.com/p/selenium/wiki/JsonWireProtocol#Cookie_JSON_Object) for current page.\n- **setOrientation(`String` orientation, `Function` callback)**<br>Set the current browser orientation.\n- **setValue(`String` selector, `String|String[]` value, `Function` callback)**<br>Sets a value to an object found by a selector (clears value before). You can also use unicode characters like `Left arrow` or `Back space`. You'll find all supported characters [here](https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/element/:id/value). To do that, the value has to correspond to a key from the table.\n- **submitForm(`String` selector, `Function` callback)**<br>Submits a form found by the selector\n- **switchTab(`String` tab ID)**<br>switch focus to a particular tab/window\n- **tap(`String` selector,`Number` x,`Number` y,`Number` tapCount,`Number` touchCount,`Number` duration,`Function` callback)**<br>Perform a tap on the screen or an element (works only on [Appium](https://github.com/appium/appium/blob/master/docs/gestures.md))\n- **touch(`String` selector, `Function` callback)**<br>Finger down on an element.\n- **waitFor(`String` selector, `Integer` milliseconds, `Function` callback)**<br>Waits for an object in the dom (selected by selector) for the amount of milliseconds provided. the callback is called with false if the object isnt found.\n\n## List of current implemented wire protocol bindings\nHere are the implemented bindings (and links to the official json protocol binding)\n\n- [alertAccept](https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/accept_alert)\n- [alertDismiss](https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/dismiss_alert)\n- [alertText](https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/alert_text)\n- [back](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/back)\n- [buttonPress](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/click)\n- [buttonDown](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/buttondown)\n- [buttonUp](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/buttonup)\n- [cookie](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/cookie)\n- [cookieName](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/cookie/:name)\n- [doubleclick](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/doubleclick)\n- [element](http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element)\n- [elementIdAttribute](http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/attribute/:name)\n- [elementIdClear](http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/clear)\n- [elementIdClick](http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/click)\n- [elementIdCssProperty](http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/css/:propertyName)\n- [elementIdDisplayed](http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/displayed)\n- [elementIdLocation](http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/location)\n- [elementIdLocationInView](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/element/:id/location_in_view)\n- [elementIdName](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/element/:id/name)\n- [elementIdSize](http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/size)\n- [elementIdText](http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/text)\n- [elementIdValue](http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/value)\n- [elementIdSelected](http://code.google.com/p/selenium/wiki/JsonWireProtocol#GET_/session/:sessionId/element/:id/selected)\n- [elements](http://code.google.com/p/selenium/wiki/JsonWireProtocol#POST_/session/:sessionId/element/:id/elements)\n- [execute](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/execute)\n- [executeAsync](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/execute_async)\n- file (undocumented protocol command)\n- [forward](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/forward)\n- [frame](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/frame)\n- [implicitWait](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/timeouts/implicit_wait)\n- [init](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/)\n- [keys](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/keys)\n- [orientation](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/orientation)\n- [moveto](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/moveto)\n- [refresh](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/refresh)\n- [screenshot](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/screenshot)\n- [session](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId)\n- [sessions](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/sessions)\n- [source](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/source)\n- [status](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/status)\n- [submit](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/element/:id/submit)\n- [timeouts](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/timeouts)\n- [title](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/title)\n- [touchClick](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/touch/click)\n- [touchDoubleClick](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/touch/doubleclick)\n- [touchDown](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/touch/down)\n- [touchFlick](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/touch/flick)\n- [touchFlickPrecise](https://github.com/appium/appium/blob/master/docs/gestures.md)\n- [touchLongClick](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/touch/longclick)\n- [touchMove](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/touch/move)\n- [touchScroll](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/touch/scroll)\n- [touchSwipe](https://github.com/appium/appium/blob/master/docs/gestures.md)\n- [touchTap](https://github.com/appium/appium/blob/master/docs/gestures.md)\n- [touchUp](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/touch/up)\n- [url](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/url)\n- [window](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/window)\n- [windowHandle](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/window_handle)\n- [windowHandlePosition](https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/window/:windowHandle/position)\n- [windowHandles](http://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/window_handles)\n- [windowHandleSize](https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/window/:windowHandle/size)\n\n## More on selenium and its protocol\n- [Latest standalone server](http://code.google.com/p/selenium/downloads/list)\n- [The protocol](http://code.google.com/p/selenium/wiki/JsonWireProtocol)\n\n## NPM Maintainers\n\nThe npm module for this library is maintained by:\n\n* [Camilo Tapia](http://github.com/Camme)\n* [Dan Jenkins](http://github.com/danjenkins)\n* [Christian Bromann](https://github.com/christian-bromann)\n* [Vincent Voyer](https://github.com/vvo)\n",
  "readmeFilename": "README.md",
  "_id": "webdriverjs@1.5.1",
  "_from": "webdriverjs@"
}
